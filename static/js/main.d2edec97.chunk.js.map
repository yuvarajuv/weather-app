{"version":3,"sources":["config.js","components/Header/Header.js","lib/Service.js","components/WeatherWiget/CurrentWeather.js","components/WeatherWiget/ForecastWeather.js","components/WeatherWiget/WeatherWiget.js","components/Loader/Loader.js","components/Search/Search.js","pages/Home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["WEATHER_API_URL","WEATHER_APP_ID","WEATHER_UNITS","TEMP_UNITS","standard","metric","imperial","WIND_UINTS","DEFAULT_LAN","DEFAULT_LON","Header","unit","setUnit","setCoordinates","initialValues","Navbar","bg","variant","expand","Brand","className","Toggle","aria-controls","Collapse","id","Nav","NavDropdown","title","map","item","Item","active","onClick","getCall","url","a","axios","get","then","res","data","CurrentWeather","cityName","timeStamp","weatherDetails","weatherDesc","weatherIcon","temp","pressure","humidity","windSpeed","Row","Col","xs","md","moment","format","src","alt","ForecastWeather","ListGroup","horizontal","maxTemp","minTemp","WeatherWiget","latitude","longitude","useState","loading","error","currentData","forcastData","allValues","setValues","useEffect","Promise","all","current","forecast","fetchData","Loader","containerClassName","animation","Spinner","defaultProps","AsyncTypeahead","withAsync","Typeahead","Search","options","searchCity","query","list","placeName","onChange","selected","isLoading","labelKey","option","onSearch","align","emptyLabel","placeholder","Home","navigator","geolocation","getCurrentPosition","position","coords","e","enableHighAccuracy","timeout","Container","fluid","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2edec97.chunk.js","sourcesContent":["export const WEATHER_API_URL = 'https://api.openweathermap.org/data/2.5';\nexport const WEATHER_APP_ID = 'fa47458e6c6542be6687757543906375';\nexport const WEATHER_UNITS = ['standard', 'metric', 'imperial'];\nexport const TEMP_UNITS = {\n    standard: '°K',\n    metric: '°C',\n    imperial: '°F'\n};\nexport const WIND_UINTS = {\n    standard: 'meter/sec',\n    metric: 'meter/sec',\n    imperial: 'miles/hour'\n};\n\nexport const DEFAULT_LAN = 13.0827;\nexport const DEFAULT_LON = 80.2707;\nexport const MAPBOX_API_URL = 'https://api.mapbox.com/geocoding/v5/mapbox.places';\nexport const MAPBOX_TOKEN = 'pk.eyJ1IjoieXV2YXJhanV2IiwiYSI6ImNraHhyaDBtYjAzNnIydW9hNmxrNzkyZHcifQ.eQCQSd6vcSwTi84j3iImsg';\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Boostrap components\nimport {\n  Navbar, Nav, NavDropdown\n} from 'react-bootstrap';\n\n// Constant\nimport { WEATHER_UNITS } from '../../config';\n\n// Components\nimport { Search } from '../../components';\n\nexport const Header = ({\n  unit, setUnit, setCoordinates, initialValues\n}) => (\n  <Navbar bg=\"info\" variant=\"dark\" expand=\"lg\">\n    <Navbar.Brand className=\"text-white\">Weather App</Navbar.Brand>\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n    <Navbar.Collapse id=\"basic-navbar-nav\">\n      <Nav className=\"mr-auto\">\n        <NavDropdown title={unit} className=\"text-capitalize\">\n          {\n            WEATHER_UNITS.map(item => (\n              <NavDropdown.Item\n                key={item}\n                active={item === unit}\n                onClick={() => { setUnit(item); }}\n              >\n                {item}\n              </NavDropdown.Item>\n            ))\n          }\n        </NavDropdown>\n      </Nav>\n      <Search\n        setCoordinates={setCoordinates}\n        initialValues={initialValues}\n      />\n    </Navbar.Collapse>\n  </Navbar>\n);\n\nHeader.propTypes = {\n  unit: PropTypes.string.isRequired,\n  setUnit: PropTypes.func.isRequired,\n  setCoordinates: PropTypes.func.isRequired,\n  initialValues: PropTypes.object.isRequired\n};\n","import axios from 'axios';\n\nexport async function getCall(url) {\n  return await axios.get(url).then(res => res.data);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport moment from 'moment';\n\n// Boostrap components\nimport { Row, Col } from 'react-bootstrap';\n\n// Contants\nimport { TEMP_UNITS, WIND_UINTS } from '../../config';\n\nconst CurrentWeather = ({ data, unit }) => {\n  const cityName = get(data, 'name');\n  const timeStamp = get(data, 'dt');\n  const weatherDetails = get(data, ['weather', '0'], {});\n\n  const weatherDesc = get(weatherDetails, 'description');\n  const weatherIcon = get(weatherDetails, 'icon');\n\n  const temp = get(data, ['main', 'temp'], '-');\n  const pressure = get(data, ['main', 'pressure'], '-');\n  const humidity = get(data, ['main', 'humidity'], '-');\n  const windSpeed = get(data, ['wind', 'speed'], '-');\n\n  return (\n    <Row className=\"weatherCard mt-4\">\n      <Col xs={12} md={12}>\n        <h1>{cityName}</h1>\n        <div><small>{moment(timeStamp * 1000).format('LLL')}</small></div>\n        <div className=\"text-capitalize\">{weatherDesc}</div>\n      </Col>\n      <Col xs={12} md={6}>\n        <div className=\"d-flex\">\n          {\n            weatherIcon && (<img src={`https://openweathermap.org/img/wn/${weatherIcon}@2x.png`} alt=\"Weather Icon\" />)\n          }\n          <h3 className=\"align-self-center\">\n            {temp}\n            <sup>{get(TEMP_UNITS, [unit], '')}</sup>\n          </h3>\n        </div>\n      </Col>\n      <Col xs={12} md={6}>\n        <div>\n          <span>{`Pressure: ${pressure} `}</span>\n          <small>hPa</small>\n        </div>\n        <div>\n          <span>{`Humidity: ${humidity} `}</span>\n          <small>%</small>\n        </div>\n        <div>\n          <span>{`Wind Speed: ${windSpeed} `}</span>\n          <small>{get(WIND_UINTS, [unit], '')}</small>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nCurrentWeather.propTypes = {\n  data: PropTypes.object.isRequired,\n  unit: PropTypes.string.isRequired\n};\n\nexport default CurrentWeather;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport moment from 'moment';\n\n// Boostrap components\nimport { Row, Col, ListGroup } from 'react-bootstrap';\n\n// Contants\nimport { TEMP_UNITS } from '../../config';\n\nconst ForecastWeather = ({ data, unit }) => (\n  <Row>\n    <Col>\n      <hr />\n      <ListGroup horizontal=\"lg\">\n        {\n          data.map((item) => {\n            const timeStamp = get(item, 'dt');\n            const weatherDetails = get(item, ['weather', '0'], {});\n            const weatherIcon = get(weatherDetails, 'icon');\n            const weatherDesc = get(weatherDetails, 'description');\n            const maxTemp = get(item, ['temp', 'max'], '-');\n            const minTemp = get(item, ['temp', 'min'], '-');\n            return (\n              <ListGroup.Item className=\"listItem\" key={timeStamp}>\n                <div>{moment(timeStamp * 1000).format('dddd')}</div>\n                {\n                  weatherIcon && (<div><img src={`https://openweathermap.org/img/wn/${weatherIcon}@2x.png`} alt=\"Weather Icon\" /></div>)\n                }\n                <div className=\"text-capitalize\"><small>{weatherDesc}</small></div>\n                <div>\n                  <small>\n                    <strong>\n                      {maxTemp}\n                      <sup>{get(TEMP_UNITS, [unit], '')}</sup>\n                    </strong>\n                    <span className=\"ml-2\">\n                      {minTemp}\n                      <sup>{get(TEMP_UNITS, [unit], '')}</sup>\n                    </span>\n                  </small>\n                </div>\n              </ListGroup.Item>\n            );\n          })\n        }\n      </ListGroup>\n    </Col>\n  </Row>\n);\n\nForecastWeather.propTypes = {\n  data: PropTypes.array.isRequired,\n  unit: PropTypes.string.isRequired\n};\n\nexport default ForecastWeather;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\n\n// Constants\nimport { WEATHER_API_URL, WEATHER_APP_ID } from '../../config';\n\n// Service\nimport { getCall } from '../../lib/Service';\n\n// Components\nimport { Loader } from '../../components';\nimport CurrrentWeather from './CurrentWeather';\nimport ForecastWeater from './ForecastWeather';\n\n\nexport const WeatherWiget = ({ latitude, longitude, unit }) => {\n  const [allValues, setValues] = useState({\n    loading: true,\n    error: null,\n    currentData: {},\n    forcastData: {},\n  });\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const [current, forecast] = await Promise.all([\n          getCall(`${WEATHER_API_URL}/weather?lat=${latitude}&lon=${longitude}&appid=${WEATHER_APP_ID}&units=${unit}`),\n          getCall(`${WEATHER_API_URL}/onecall?lat=${latitude}&lon=${longitude}&appid=${WEATHER_APP_ID}&units=${unit}&exclude=minutely,hourly,alerts`)\n        ]);\n        setValues({\n          ...allValues,\n          loading: false,\n          currentData: current,\n          forcastData: forecast\n        });\n      } catch (e) {\n        setValues({\n          ...allValues,\n          loading: false,\n          error: 'Weather report is currently not avaliable !'\n        });\n      }\n    }\n    setValues({\n      ...allValues,\n      loading: true\n    });\n    fetchData();\n  }, [latitude, longitude, unit]);\n\n  const {\n    loading, error, currentData, forcastData\n  } = allValues;\n\n  if (loading) {\n    return (<Loader />);\n  }\n\n  if (error) {\n    return (<div className=\"alert alert-danger mt-4\">{error}</div>);\n  }\n\n  return (\n    <>\n      <CurrrentWeather data={currentData} unit={unit} />\n      <ForecastWeater data={get(forcastData, 'daily', [])} unit={unit} />\n    </>\n  );\n};\n\nWeatherWiget.propTypes = {\n  latitude: PropTypes.number.isRequired,\n  longitude: PropTypes.number.isRequired,\n  unit: PropTypes.string.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Boostrap component\nimport Spinner from 'react-bootstrap/Spinner';\n\nexport const Loader = ({ containerClassName, animation, variant }) => (\n  <div className={containerClassName}>\n    <Spinner animation={animation} variant={variant} />\n  </div>\n);\n\nLoader.propTypes = {\n  containerClassName: PropTypes.string,\n  animation: PropTypes.string,\n  variant: PropTypes.string\n};\n\nLoader.defaultProps = {\n  containerClassName: 'mt-4 text-center',\n  animation: 'border',\n  variant: 'info'\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\n\n// CSS\nimport './Search.css';\n\n// Typehead\nimport { Typeahead, withAsync } from 'react-bootstrap-typeahead';\n\n// Constants\nimport { MAPBOX_API_URL, MAPBOX_TOKEN } from '../../config';\n\n// Service\nimport { getCall } from '../../lib/Service';\n\nconst AsyncTypeahead = withAsync(Typeahead);\nexport const Search = ({ setCoordinates, initialValues }) => {\n  const [allValues, setValues] = useState({\n    loading: false,\n    options: []\n  });\n\n  const searchCity = async (query) => {\n    try {\n      setValues({\n        ...allValues,\n        loading: false\n      });\n\n      const data = await getCall(`${MAPBOX_API_URL}/${query}.json?access_token=${MAPBOX_TOKEN}`);\n      const list = get(data, 'features', []).map((item) => {\n        const placeName = get(item, 'place_name');\n        const latitude = get(item, ['geometry', 'coordinates', '0'], null);\n        const longitude = get(item, ['geometry', 'coordinates', '1'], null);\n        return {\n          id: latitude,\n          placeName,\n          latitude,\n          longitude\n        };\n      });\n      setValues({\n        loading: false,\n        options: list\n      });\n    } catch (e) {\n      setValues({\n        loading: false,\n        options: []\n      });\n    }\n  };\n\n  const { loading, options } = allValues;\n\n  return (\n    <div>\n      <AsyncTypeahead\n        onChange={(selected) => {\n          setCoordinates(get(selected, ['0', 'latitude'], initialValues.latitude),\n            get(selected, ['0', 'longitude'], initialValues.longitude));\n        }}\n        isLoading={loading}\n        labelKey={option => `${option.placeName}`}\n        onSearch={searchCity}\n        options={options}\n        align=\"left\"\n        emptyLabel=\"No city found\"\n        id=\"search\"\n        placeholder=\"Search city\"\n        className=\"searchBox\"\n      />\n    </div>\n  );\n};\n\nSearch.propTypes = {\n  setCoordinates: PropTypes.func.isRequired,\n  initialValues: PropTypes.object.isRequired\n};\n","import React, { useState, useEffect } from 'react';\n\n// Boostrap components\nimport Container from 'react-bootstrap/Container';\n\n// Components\nimport { Header, WeatherWiget, Loader } from '../../components';\n\n// Constants\nimport { DEFAULT_LAN, DEFAULT_LON } from '../../config';\n\nexport const Home = () => {\n  const [allValues, setValues] = useState({\n    loading: true,\n    latitude: null,\n    longitude: null,\n    unit: 'standard',\n    initialValues: {\n      latitude: null,\n      longitude: null,\n    }\n  });\n\n  const setUnit = (unit) => {\n    setValues({\n      ...allValues,\n      unit\n    });\n  };\n\n  const setCoordinates = (latitude, longitude) => {\n    setValues({\n      ...allValues,\n      latitude,\n      longitude\n    });\n  };\n\n  useEffect(() => {\n    //get geo location\n    navigator.geolocation.getCurrentPosition((position) => {\n      // success\n      setValues({\n        ...allValues,\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        loading: false,\n        initialValues: {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        }\n      });\n    }, (e) => {\n      // failed\n      setValues({\n        ...allValues,\n        latitude: DEFAULT_LAN,\n        longitude: DEFAULT_LON,\n        loading: false,\n        initialValues: {\n          latitude: DEFAULT_LAN,\n          longitude: DEFAULT_LON,\n        }\n      });\n    }, {\n      enableHighAccuracy: true,\n      timeout: 5000\n    });\n  }, []);\n\n  const {\n    loading, latitude, longitude, unit, initialValues\n  } = allValues;\n\n  if (loading) {\n    return (<Loader />);\n  }\n\n  return (\n    <>\n      <Header\n        unit={unit}\n        setUnit={setUnit}\n        setCoordinates={setCoordinates}\n        initialValues={initialValues}\n      />\n      <Container fluid>\n        <WeatherWiget\n          latitude={latitude}\n          longitude={longitude}\n          unit={unit}\n        />\n      </Container>\n    </>\n  );\n};\n","import React from 'react';\nimport './App.css';\n\n// pages\nimport { Home } from './pages';\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}